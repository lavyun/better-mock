(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{655:function(n,e,r){},772:function(n,e,r){"use strict";r(655)},842:function(n,e,r){"use strict";r.r(e);r(139),r(43),r(224),r(10),r(85),r(86),r(141),r(66);var a=r(683),t=r.n(a),o={name:"page-background",data:function(){return{editor:null,messages:[]}},methods:{runCode:function(){var n=this.editor.getValue();localStorage.setItem("BM_BACKGROUND_CODE",n),new Function(n)()},createMessage:function(n){var e=this.valueType(n);if("object"===e)try{n=JSON.stringify(n,null,2)}catch(n){}else if(["array","number","string","null","boolean"].includes(e))try{n=JSON.stringify(n)}catch(n){}else n=String(n);return{value:n,type:e}},valueType:function(n){return null!=n?Object.prototype.toString.call(n).match(/\[object (\w+)\]/)[1].toLowerCase():String(n)},overrideConsole:function(){var n=this,e=console.log;console.log=function(){for(var r=arguments.length,a=new Array(r),t=0;t<r;t++)a[t]=arguments[t];a.forEach((function(e){n.messages.push(n.createMessage(e))})),e.call.apply(e,[null].concat(a))}}},mounted:function(){var n=r(700);n.languages.typescript.typescriptDefaults.addExtraLib("// Type definitions for better-mock\n// Project: http://github.com/lavyun/better-mock\n// Definitions by: lavyun <https://github.com/lavyun>\n\ndeclare namespace Mock {\n  // Interface for global namespace 'betterMock'\n  interface BetterMock {\n    mock: Mock;\n    setup: Setup;\n    Random: Random;\n    valid: Valid;\n    toJSONSchema: ToJSONSchema;\n    version: number;\n  }\n\n  interface MockCbOptions {\n    url: string;\n    type: string;\n    body: string | null;\n  }\n\n  // Mock.mock()\n  interface Mock {\n    (rurl: string | RegExp, rtype: string, template: ((options: MockCbOptions) => any) | any): BetterMock;\n\n    (rurl: string | RegExp, template: ((options: MockCbOptions) => any) | any): BetterMock;\n\n    (template: any): any;\n  }\n\n  interface SetupSettings {\n    timeout?: number | string;\n  }\n\n  // Mock.setup()\n  type Setup = (settings: SetupSettings) => void;\n\n  type StringPool = 'lower' | 'upper' | 'number' | 'symbol';\n\n  /**\n   * Mock.Random - Basic\n   */\n  interface RandomBasic {\n    /**\n     * 返回一个随机的布尔值\n     * @param min 指示参数 current 出现的概率\n     * @param max 指示参数 current 的相反值 !current 出现的概率\n     * @param current 可选值为布尔值 true 或 false\n     */\n    boolean(min?: number, max?: number, current?: boolean): boolean;\n\n    /**\n     * 返回一个随机的自然数\n     * @param min 指示随机自然数的最小值。默认值为 0\n     * @param max 指示随机自然数的最大值。默认值为 9007199254740992\n     */\n    natural(min?: number, max?: number): number;\n\n    /**\n     * 返回一个随机的整数\n     * @param min 指示随机整数的最小值。默认值为 -9007199254740992\n     * @param max 指示随机整数的最大值。默认值为 9007199254740992\n     */\n    integer(min?: number, max?: number): number;\n\n    /**\n     * 返回一个随机的浮点数\n     * @param min 整数部分的最小值。默认值为 -9007199254740992\n     * @param max 整数部分的最大值。默认值为 9007199254740992\n     * @param dmin 小数部分位数的最小值。默认值为 0\n     * @param dmax 小数部分位数的最大值。默认值为 17\n     */\n    float(min?: number, max?: number, dmin?: number, dmax?: number): number;\n\n    /**\n     * 返回一个随机字符\n     * @param pool - 字符池，如果传入了 'lower'、'upper'、'number'、'symbol'，将从内置的字符池从选取\n     */\n    character(pool?: StringPool | string): string;\n\n    /**\n     * 返回一个随机字符串\n     * @param pool 字符池，如果传入了 'lower'、'upper'、'number'、'symbol'，将从内置的字符池从选取\n     * @param min 随机字符串的最小长度。默认值为 3\n     * @param max 随机字符串的最大长度。默认值为 7\n     */\n    string(pool: StringPool | string, min: number, max: number): string;\n\n    /**\n     * 返回一个随机字符串\n     * @param min 随机字符串的最小长度。默认值为 3\n     * @param max 随机字符串的最大长度。默认值为 7\n     */\n    string(min: number, max: number): string;\n\n    /**\n     * 返回一个随机字符串\n     * @param pool 字符池，如果传入了 'lower'、'upper'、'number'、'symbol'，将从内置的字符池从选取\n     * @param length 字符串长度\n     */\n    string(pool: StringPool | string, length: number): string;\n\n    /**\n     * 返回一个随机字符串\n     * @param pool 字符池，如果传入了 'lower'、'upper'、'number'、'symbol'，将从内置的字符池从选取\n     */\n    string(pool: StringPool | string): string;\n\n    /**\n     * 返回一个随机字符串\n     * @param length 字符串长度\n     */\n    string(length: number): string;\n\n    /**\n     * 返回一个随机字符串\n     */\n    string(): string;\n\n    /**\n     * 返回一个整型数组\n     * @param start 数组中整数的起始值\n     * @param stop 数组中整数的结束值（不包含在返回值中）\n     * @param step 数组中整数之间的步长。默认值为 1\n     */\n    range(start: number, stop: number, step: number): number;\n\n    /**\n     * 返回一个整型数组\n     * @param start 数组中整数的起始值\n     * @param stop 数组中整数的结束值（不包含在返回值中）\n     */\n    range(start: number, stop: number): number;\n\n    /**\n     * 返回一个整型数组\n     * @param stop 数组中整数的结束值（不包含在返回值中）\n     */\n    range(stop: number): number;\n  }\n\n  // Mock.Random - Date\n  type RandomDateUtilString = 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second' | 'week';\n  interface RandomDate {\n    /**\n     * 返回一个随机的日期字符串\n     * @param format 生成的日期字符串的格式，默认值为 yyyy-MM-dd\n     */\n    date(format?: string): string;\n\n    /**\n     * 返回一个随机的时间字符串\n     * @param format 生成的时间字符串的格式，默认值为 HH:mm:ss\n     */\n    time(format?: string): string;\n\n    /**\n     * 返回一个随机的日期和时间字符串\n     * @param format 生成的日期和时间字符串的格式，默认值为 yyyy-MM-dd HH:mm:ss\n     */\n    datetime(format?: string): string;\n\n    /**\n     * 返回当前的日期和时间字符串\n     * @param util 时间单位，可选值有：year、month、week、day、hour、minute、second、week\n     * @param format 生成的日期和时间字符串的格式，默认值为 yyyy-MM-dd HH:mm:ss\n     */\n    now(util?: RandomDateUtilString | string, format?: string): string;\n\n    /**\n     * 随机生成一个时间戳\n     */\n    timestamp(): number;\n  }\n\n  // Mock.Random - Image\n  interface RandomImage {\n    /**\n     * 随机生成一个随机的图片地址\n     * @param size 图片的宽高，格式为 '宽x高'\n     * @param background 图片的背景色。默认值为 '#000000'\n     * @param foreground 图片的前景色（文字）。默认值为 '#FFFFFF'\n     * @param format 片的格式。默认值为 'png'，可选值包括：'png'、'gif'、'jpg'\n     * @param text 指示图片上的文字。默认值为参数 size\n     */\n    image(size: string, background: string, foreground: string, format: 'png' | 'gif' | 'jpg', text: string): string;\n    \n    /**\n     * 随机生成一个随机的图片地址\n     * @param size 图片的宽高，格式为 '宽x高'\n     * @param background 图片的背景色。默认值为 '#000000'\n     * @param foreground 图片的前景色（文字）。默认值为 '#FFFFFF'\n     * @param text 指示图片上的文字。默认值为参数 size\n     */\n    image(size: string, background: string, foreground: string, text: string): string;\n    \n    /**\n     * 随机生成一个随机的图片地址\n     * @param size 图片的宽高，格式为 '宽x高'\n     * @param background 图片的背景色。默认值为 '#000000'\n     * @param text 指示图片上的文字。默认值为参数 size\n     */\n    image(size: string, background: string, text: string): string;\n    \n    /**\n     * 随机生成一个随机的图片地址\n     * @param size 图片的宽高，格式为 '宽x高'\n     * @param text 指示图片上的文字。默认值为参数 size\n     */\n    image(size: string, text: string): string;\n    \n    /**\n     * 随机生成一个随机的图片地址\n     */\n    image(): string;\n\n    /**\n     * 随机生成一段随机的 Base64 图片编码\n     * @param size 图片的宽高\n     * @param text 图片上的文字\n     */\n    dataImage(size?: string, text?: string): string;\n  }\n\n  // Mock.Random - Color\n  interface RandomColor {\n    /**\n     * 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'\n     */\n    color(): string;\n\n    /**\n     * 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'\n     */\n    hex(): string;\n\n    /**\n     * 随机生成一个有吸引力的颜色，格式为 'rgb(r, g, b)'\n     */\n    rgb(): string;\n\n    /**\n     * 随机生成一个有吸引力的颜色，格式为 'rgba(r, g, b, a)'\n     */\n    rgba(): string;\n\n    /**\n     * 随机生成一个有吸引力的颜色，格式为 'hsl(h, s, l)'\n     */\n    hsl(): string;\n  }\n\n  // Mock.Random - Text\n  interface RandomText {\n    /**\n     * 随机生成一段文本\n     * @param min 指示文本中句子的最小个数。默认值为 3\n     * @param max 指示文本中句子的最大个数。默认值为 7\n     */\n    paragraph(min?: number, max?: number): string;\n\n    /**\n     * 随机生成一段中文文本\n     * @param min 指示文本中句子的最小个数。默认值为 3\n     * @param max 指示文本中句子的最大个数。默认值为 7\n     */\n    cparagraph(min?: number, max?: number): string;\n\n    /**\n     * 随机生成一个句子，第一个单词的首字母大写\n     * @param min 指示句子中单词的最小个数。默认值为 12\n     * @param max 指示句子中单词的最大个数。默认值为 18\n     */\n    sentence(min?: number, max?: number): string;\n\n    /**\n     * 随机生成一段中文句子\n     * @param min 句子中汉字的最小个数。默认值为 12\n     * @param max 句子中汉字的最大个数。默认值为 18\n     */\n    csentence(min?: number, max?: number): string;\n\n    /**\n     * 随机生成一个单词\n     * @param min 单词中字符的最小个数。默认值为 3\n     * @param max 单词中字符的最大个数。默认值为 10\n     */\n    word(min?: number, max?: number): string;\n\n    /**\n     * 随机生成一个汉字\n     * @param pool 汉字字符串。表示汉字字符池\n     * @param min 随机汉字字符串的最小长度。默认值为 1\n     * @param max 随机汉字字符串的最大长度。默认值为 1\n     */\n    cword(pool?: string | number, min?: number, max?: number): string;\n\n    /**\n     * 随机生成一句标题，其中每个单词的首字母大写\n     * @param min 单词中字符的最小个数。默认值为 3\n     * @param max 单词中字符的最大个数。默认值为 7\n     */\n    title(min?: number, max?: number): string;\n\n    /**\n     * 随机生成一句中文标题\n     * @param min 单词中字符的最小个数。默认值为 3\n     * @param max 单词中字符的最大个数。默认值为 7\n     */\n    ctitle(min?: number, max?: number): string;\n  }\n\n  // Mock.Random - Name\n  interface RandomName {\n    /**\n     * 随机生成一个常见的英文名\n     */\n    first(): string;\n\n    /**\n     * 随机生成一个常见的英文姓\n     */\n    last(): string;\n\n    /**\n     * 随机生成一个常见的英文姓名\n     * @param middle 是否生成中间名\n     */\n    name(middle?: boolean): string;\n\n    /**\n     * 随机生成一个常见的中文名\n     */\n    cfirst(): string;\n\n    /**\n     * 随机生成一个常见的中文姓\n     */\n    clast(): string;\n\n    /**\n     * 随机生成一个常见的中文姓名\n     */\n    cname(): string;\n  }\n\n  // Mock.Random - Web\n  type RandomWebProtocol = 'http' | 'ftp' | 'gopher' | 'mailto' | 'mid' | 'cid' | 'news' | 'nntp' | 'prospero' | 'telnet' | 'rlogin' | 'tn3270' | 'wais';\n  interface RandomWeb {\n    /**\n     * 随机生成一个 URL\n     * @param protocol URL 协议。例如 http\n     * @param host URL 域名和端口号。例如 baidu.com\n     */\n    url(protocol?: string, host?: string): string;\n\n    /**\n     * 随机生成一个 URL 协议\n     */\n    protocol(): RandomWebProtocol;\n\n    /**\n     * 随机生成一个域名\n     */\n    domain(): string;\n\n    /**\n     * 随机生成一个顶级域名\n     */\n    dtl(): string;\n\n    /**\n     * 随机生成一个邮件地址\n     * @param domain 邮件地址的域名。例如 nuysoft.com\n     */\n    email(domain?: string): string;\n\n    /**\n     * 随机生成一个 IP 地址\n     */\n    ip(): string;\n  }\n\n  // Mock.Random - Address\n  interface RandomAddress {\n    /**\n     * 随机生成一个（中国）大区\n     */\n    region(): string;\n\n    /**\n     * 随机生成一个（中国）省（或直辖市、自治区、特别行政区）\n     */\n    province(): string;\n\n    /**\n     * 随机生成一个（中国）市\n     * @param prefix 是否生成所属的省\n     */\n    city(prefix?: boolean): string;\n\n    /**\n     * 随机生成一个（中国）县\n     * @param prefix 否生成所属的省、市\n     */\n    country(prefix?: boolean): string;\n\n    /**\n     * 随机生成一个邮政编码（六位数字）\n     */\n    zip(): string;\n  }\n\n  // Mock.Random - Helper\n  interface RandomHelper {\n    /**\n     * 把字符串的第一个字母转换为大写\n     * @param word 字符串\n     */\n    capitalize(word: string): string;\n\n    /**\n     * 把字符串转换为大写\n     * @param str 字符串\n     */\n    upper(str: string): string;\n\n    /**\n     * 把字符串转换为小写\n     * @param str 字符串\n     */\n    lower(str: string): string;\n\n    /**\n     * 从数组中随机选取一个元素\n     * @param arr 数组\n     */\n    pick<T = any>(arr: T[]): T;\n\n    /**\n     * 打乱数组中元素的顺序，并返回\n     * @param arr 数组\n     * @param min 返回的数组的最小长度\n     * @param max 返回的数组的最大长度\n     */\n    shuffle<T = any>(arr: T[], min?: number, max?: number): T[];\n  }\n\n  // Mock.Random - Miscellaneous\n  interface RandomMiscellaneous {\n    /**\n     * 随机生成一个 GUID\n     */\n    guid(): string;\n\n    /**\n     * 随机生成一个 18 位身份证\n     */\n    id(): string;\n\n    /**\n     * 生成一个全局的自增整数\n     * @param step 整数自增的步长。默认值为 1\n     */\n    increment(step?: number): number;\n\n    /**\n     * 随机生成一个版本号，每一位的最大值不超过10\n     * @param step 版本号的层级，默认为 3\n     */\n    version(depth?: number): string;\n\n    /**\n     * 生成一个中国的手机号\n     */\n    phone(): string;\n  }\n\n  type RandomExtendSource = {\n    [prop: string]: Function\n  }\n  // Mock.Random\n  interface Random extends RandomBasic, RandomDate,\n    RandomImage, RandomColor, RandomAddress,\n    RandomHelper, RandomMiscellaneous, RandomName,\n    RandomText, RandomWeb {\n      extend(source: RandomExtendSource): Random\n    }\n\n  interface ValidRsItem {\n    action: string;\n    actual: string;\n    expected: string;\n    message: string;\n    path: string[];\n    type: string;\n  }\n\n  // Mock.valid()\n  type Valid = (template: any, data: any) => ValidRsItem[];\n\n  interface ToJSONSchemaRs {\n    name: string | undefined;\n    template: any;\n    type: string;\n    rule: object;\n    path: string[];\n    properties?: ToJSONSchemaRs[];\n    items?: ToJSONSchemaRs[];\n  }\n\n  // Mock.toJSONSchema()\n  type ToJSONSchema = (template: any) => ToJSONSchemaRs;\n\n  let mock: Mock;\n  let setup: Setup;\n  let Random: Random;\n  let valid: Valid;\n  let toJSONSchema: ToJSONSchema;\n  let version: number;\n}\n\nexport = Mock;\n".replace("export = Mock;","")),n.languages.typescript.typescriptDefaults.addExtraLib("interface AxiosTransformer {\n  (data: any, headers?: any): any;\n}\n\ninterface AxiosAdapter {\n  (config: AxiosRequestConfig): AxiosPromise<any>;\n}\n\ninterface AxiosBasicCredentials {\n  username: string;\n  password: string;\n}\n\ninterface AxiosProxyConfig {\n  host: string;\n  port: number;\n  auth?: {\n    username: string;\n    password:string;\n  };\n  protocol?: string;\n}\n\ntype Method =\n  | 'get' | 'GET'\n  | 'delete' | 'DELETE'\n  | 'head' | 'HEAD'\n  | 'options' | 'OPTIONS'\n  | 'post' | 'POST'\n  | 'put' | 'PUT'\n  | 'patch' | 'PATCH'\n  | 'link' | 'LINK'\n  | 'unlink' | 'UNLINK'\n\ntype ResponseType = \n  | 'arraybuffer' \n  | 'blob' \n  | 'document' \n  | 'json' \n  | 'text' \n  | 'stream'\n\ninterface AxiosRequestConfig {\n  url?: string;\n  method?: Method;\n  baseURL?: string;\n  transformRequest?: AxiosTransformer | AxiosTransformer[];\n  transformResponse?: AxiosTransformer | AxiosTransformer[];\n  headers?: any;\n  params?: any;\n  paramsSerializer?: (params: any) => string;\n  data?: any;\n  timeout?: number;\n  timeoutErrorMessage?: string;\n  withCredentials?: boolean;\n  adapter?: AxiosAdapter;\n  auth?: AxiosBasicCredentials;\n  responseType?: ResponseType;\n  xsrfCookieName?: string;\n  xsrfHeaderName?: string;\n  onUploadProgress?: (progressEvent: any) => void;\n  onDownloadProgress?: (progressEvent: any) => void;\n  maxContentLength?: number;\n  validateStatus?: (status: number) => boolean;\n  maxRedirects?: number;\n  socketPath?: string | null;\n  httpAgent?: any;\n  httpsAgent?: any;\n  proxy?: AxiosProxyConfig | false;\n  cancelToken?: CancelToken;\n}\n\ninterface AxiosResponse<T = any>  {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: any;\n  config: AxiosRequestConfig;\n  request?: any;\n}\n\ninterface AxiosError<T = any> extends Error {\n  config: AxiosRequestConfig;\n  code?: string;\n  request?: any;\n  response?: AxiosResponse<T>;\n  isAxiosError: boolean;\n  toJSON: () => object;\n}\n\ninterface AxiosPromise<T = any> extends Promise<AxiosResponse<T>> {\n}\n\ninterface CancelStatic {\n  new (message?: string): Cancel;\n}\n\ninterface Cancel {\n  message: string;\n}\n\ninterface Canceler {\n  (message?: string): void;\n}\n\ninterface CancelTokenStatic {\n  new (executor: (cancel: Canceler) => void): CancelToken;\n  source(): CancelTokenSource;\n}\n\ninterface CancelToken {\n  promise: Promise<Cancel>;\n  reason?: Cancel;\n  throwIfRequested(): void;\n}\n\ninterface CancelTokenSource {\n  token: CancelToken;\n  cancel: Canceler;\n}\n\ninterface AxiosInterceptorManager<V> {\n  use(onFulfilled?: (value: V) => V | Promise<V>, onRejected?: (error: any) => any): number;\n  eject(id: number): void;\n}\n\ninterface AxiosInstance {\n  (config: AxiosRequestConfig): AxiosPromise;\n  (url: string, config?: AxiosRequestConfig): AxiosPromise;\n  defaults: AxiosRequestConfig;\n  interceptors: {\n    request: AxiosInterceptorManager<AxiosRequestConfig>;\n    response: AxiosInterceptorManager<AxiosResponse>;\n  };\n  getUri(config?: AxiosRequestConfig): string;\n  request<T = any, R = AxiosResponse<T>> (config: AxiosRequestConfig): Promise<R>;\n  get<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;\n  delete<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;\n  head<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;\n  options<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;\n  post<T = any, R = AxiosResponse<T>>(url: string, data?: any, config?: AxiosRequestConfig): Promise<R>;\n  put<T = any, R = AxiosResponse<T>>(url: string, data?: any, config?: AxiosRequestConfig): Promise<R>;\n  patch<T = any, R = AxiosResponse<T>>(url: string, data?: any, config?: AxiosRequestConfig): Promise<R>;\n}\n\ninterface AxiosStatic extends AxiosInstance {\n  create(config?: AxiosRequestConfig): AxiosInstance;\n  Cancel: CancelStatic;\n  CancelToken: CancelTokenStatic;\n  isCancel(value: any): boolean;\n  all<T>(values: (T | Promise<T>)[]): Promise<T[]>;\n  spread<T, R>(callback: (...args: T[]) => R): (array: T[]) => R;\n}\n\ndeclare const axios: AxiosStatic\n\n");var e=this.$route.query.code,a=localStorage.getItem("BM_BACKGROUND_CODE"),o=n.editor.create(document.getElementById("container"),{language:"typescript",theme:"vs-dark",value:e||a||"Mock.mock('http://example.com/path/to', {\n    'list|1-10': [{\n        'id|+1': 1\n    }]\n})\n\naxios.get('http://example.com/path/to').then(res => {\n    console.log(res.data)\n})\n",minimap:{enabled:!1}});this.editor=o,this.overrideConsole(),window.axios=t.a,window.Mock=r(231)}},s=(r(772),r(65)),i=Object(s.a)(o,(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("div",{staticClass:"page-playground-box"},[r("div",{attrs:{id:"container"}},[r("div",{staticClass:"run-button",on:{click:n.runCode}},[n._v("Run >>")])]),n._v(" "),r("div",{staticClass:"console-panel-desc"},[r("span",{on:{click:function(e){n.messages=[]}}},[n._v("clear")]),n._v(" "),r("p",[n._v("\n      可以在编辑器中使用 better-mock 和 axios 的所有方法, console.log 后会在下方打印结果, 也可以F12打开控制台查看\n    ")])]),n._v(" "),r("div",{staticClass:"console-panel"},n._l(n.messages,(function(e,a){return r("pre",[n._v(n._s(e.value))])})),0)])}),[],!1,null,null,null);e.default=i.exports}}]);